[tool.poetry]
name = "emma"
version = "0.6.0"
description = "Emma is an agent designed to help you interact with Infrahub."
authors = ["OpsMill <info@opsmill.com>"]
readme = "README.md"

packages = [
    { include = "emma" }
]

[tool.poetry.dependencies]
python = "^3.10, < 3.13"
streamlit = "^1.43.1"
infrahub-sdk = {version = "^1", extras = ["all"]}
watchdog = "^6.0.0"
langchain = "^0.2.17"
langchain-community = "^0.2.19"
openai = "^1.65.5"
langchain-openai = "^0.1.22"
streamlit-flow-component = "^1.6.1"
streamlit-sortables = "^0.3.1"
st-pages = "^1.0.1"
jinja2 = "^3.1.6"
gitpython = "^3.1.43"

[tool.poetry.group.dev.dependencies]
ruff = "^0.9"
mypy = "*"
yamllint = "^1.35.1"
towncrier = "^24.7.1"
pylint = "~3.3"
types-pyyaml = "^6.0.12.20241230"
invoke = "^2.2.0"
types-pytz = "^2025.1.0.20250204"


[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = ["if TYPE_CHECKING:", "raise NotImplementedError()"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
filterwarnings = ["ignore:pkg_resources is deprecated"]
addopts = "-vs"


[tool.mypy]
pretty = true
ignore_missing_imports = true

[tool.ruff]
line-length = 120
exclude = ["schema-library"]

[tool.ruff.lint]
preview = true

task-tags = ["FIXME", "TODO", "XXX"]

select = [
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "C90",   # mccabe complexity
    "DJ",    # flake8-django
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle errors
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "FURB",  # refurb
    "I",     # isort-like checks
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "N",     # pep8-naming
    "PERF",  # Perflint
    "PIE",   # flake8-pie
    "PL",    # pylint
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RUF",   # Ruff specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "T10",   # flake8-debugger
    "UP",    # pyupgrade
    "W",     # pycodestyle warnings
    "YTT",   # flake8-2020
]

ignore = [
    ##################################################################################################
    # The ignored rules below should be removed once the code has been updated, they are included    #
    # like this so that we can reactivate them one by one. Alternatively ignored after further       #
    # investigation if they are deemed to not make sense.                                            #
    ##################################################################################################
    "ANN001", # Missing type annotation for function argument
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "ANN204", # Missing return type annotation for special method
    "ANN205", # Missing return type annotation for staticmethod
    "ANN206", # Missing return type annotation for classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "INP001", # Is part of an implicit namespace package
    "B007",     # Loop control variable not used within loop body
    "B008",     # Do not perform function call `Depends` in argument defaults;
    "B009",     # [*] Do not call `getattr` with a constant attribute value. It is not any safer than normal property access.
    "B010",     # [*] Do not call `setattr` with a constant attribute value. It is not any safer than normal property access.
    "B904",     # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "C403",     # Unnecessary `list` comprehension (rewrite as a `set` comprehension)
    "C408",    # Unnecessary `dict` call (rewrite as a literal)
    "C409",     # Unnecessary `list` literal passed to `tuple()` (rewrite as a `tuple` literal)
    "C414",     # Unnecessary `list` call within `sorted()`
    "C416",     # Unnecessary dict comprehension (rewrite using `dict()`)
    "FURB101",  # `open` and `read` should be replaced by `Path(readme_path).read_text(encoding="utf8")`
    "FURB110", # Replace ternary `if` expression with `or` operator
    "FURB113", # Use `lines.extend((" " * self.indentation + "}", "}"))` instead of repeatedly calling `lines.append()`
    "FURB177", # Prefer `Path.cwd()` over `Path().resolve()` for current-directory lookups
    "N801",     # Class name should use CapWords convention
    "N802",     # Function name should be lowercase
    "N805",     # First argument of a method should be named self
    "N806",     # Variable in function should be lowercase
    "N812",     # Lowercase imported as non-lowercase
    "PERF203", # `try`-`except` within a loop incurs performance overhead
    "PERF401", # Use a list comprehension to create a transformed list
    "PLR0904",  # Too many public methods
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments in function definition
    "PLR0914",  # Too many local variables
    "PLR0915",  # Too many statements
    "PLR0916",  # Too many Boolean expressions
    "PLR0917",  # Too many positional arguments
    "PLR1702",  # Too many nested blocks
    "PLR2004",  # Magic value used in comparison this could possibly be fine in the tests folders
    "PLR6201",  # Use a `set` literal when testing for membership
    "PLR6301",  # Method could be a function, class method, or static method
    "PLW0603",  # Using the global statement to update `SETTINGS` is discouraged
    "PLW1508",  # Invalid type for environment variable default; expected `str` or `None`
    "PLW3201",  # Bad or misspelled dunder method name `__init_subclass_with_meta__`
    "PTH100",   # `os.path.abspath()` should be replaced by `Path.resolve()`
    "PTH102",   # `os.mkdir()` should be replaced by `Path.mkdir()`
    "PTH103",   # `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    "PTH107",   # `os.remove()` should be replaced by `Path.unlink()`
    "PTH108",   # `os.unlink()` should be replaced by `Path.unlink()`
    "PTH109",   # `os.getcwd()` should be replaced by `Path.cwd()`
    "PTH110",   # `os.path.exists()` should be replaced by `Path.exists()`
    "PTH112",   # `os.path.isdir()` should be replaced by `Path.is_dir()`
    "PTH113",   # `os.path.isfile()` should be replaced by `Path.is_file()`
    "PTH117",   # `os.path.isabs()` should be replaced by `Path.is_absolute()`
    "PTH118",   # `os.path.join()` should be replaced by `Path` with `/` operator
    "PTH123",   # `open()` should be replaced by `Path.open()`
    "RET503",   # Missing explicit `return` at the end of function able to return non-`None` value
    "RET504",  # Unnecessary assignment before `return` statement
    "RET504",  # Unnecessary assignment to `data` before `return` statement
    "RUF001",  # String contains ambiguous
    "RUF005",  # Consider `[*path, str(key)]` instead of concatenation
    "RUF015",  # Prefer `next(iter(input_data["variables"].keys()))` over single element slice
    "RUF029",  # Function is declared `async`, but doesn't `await` or use `async` features.
    "S108",    # Probable insecure usage of temporary file or directory
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S701",    # By default, jinja2 sets `autoescape` to `False`. Consider using `autoescape=True`
    "SIM102",  # Use a single `if` statement instead of nested `if` statements
    "SIM105",  # Use `contextlib.suppress(KeyError)` instead of `try`-`except`-`pass`
    "SIM108",  # Use ternary operator `key_str = f"{value[ALIAS_KEY]}: {key}" if ALIAS_KEY in value and value[ALIAS_KEY] else key` instead of `if`-`else`-block
    "SIM110",  # Use `return any(getattr(item, resource_field) == resource_id for item in getattr(self, RESOURCE_MAP[resource_type]))` instead of `for` loop
    "SIM114",  # Combine `if` branches using logical `or` operator
    "SIM117",  # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "SIM118",  # Use `key in dict` instead of `key in dict.keys
    "SIM910",  # Use `data.get(key)` instead of `data.get(key, None)`
    "UP006",   # Use `dict` instead of `Dict` for type annotation
    "UP007",   # Use X | Y for type annotations
    "UP012",    # Unnecessary call to encode as UTF-8
    "UP018",    # Unnecessary {literal_type} call (rewrite as a literal)
    "UP031",    # Use format specifiers instead of percent format
    "UP034",    # Avoid extraneous parentheses
    "UP035",   # `typing.Dict` is deprecated, use `dict` instead
]


#https://docs.astral.sh/ruff/formatter/black/
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["emma"]

[tool.ruff.lint.pycodestyle]
max-line-length = 150

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.per-file-ignores]

[tool.pylint.general]
extension-pkg-whitelist = ["pydantic", "ujson"]

[tool.pylint.format]
disable = "logging-fstring-interpolation"

[tool.pylint.basic]
# No docstrings required for private methods (Pylint default), or for test_ functions.
no-docstring-rgx = "^(_|test_)"

[tool.pylint.messages_control]
# Line length is enforced by Black, so pylint doesn't need to check it.
# Pylint and Black disagree about how to format multi-line arrays; Black wins.
# assigning-non-slot,no-member,unsupported-membership-test,unsubscriptable-object,unsupported-assignment-operation,not-an-iterable
# are disabled because of our move to pydantic 2, pylint does not seem to respect the type hint for pydantic 2 model fields.
disable = """,
    line-too-long,
    missing-module-docstring,
    missing-function-docstring,
    missing-class-docstring,
    consider-using-from-import,
    invalid-name,
    too-many-arguments,
    too-many-locals,
    keyword-arg-before-vararg,
    too-few-public-methods,
    too-many-instance-attributes,
    fixme,
    consider-using-f-string,
    protected-access,
    import-self,
    wrong-import-order,
    assigning-non-slot,
    no-member,
    unsupported-membership-test,
    unsubscriptable-object,
    unsupported-assignment-operation,
    not-an-iterable,
    too-many-return-statements,
    unnecessary-comprehension,
    multiple-statements,
    self-assigning-variable,
    no-else-return,
    """

[tool.pylint.miscellaneous]
notes = """,
    FIXME,
    XXX,
    """

[tool.pylint.similarities]
min-similarity-lines = 20

[tool.towncrier]
package = "emma"
directory = "emma/changelog.d"
filename = "CHANGELOG.md"
start_string = "<!-- towncrier release notes start -->\n"
underlines = ["", "", ""]
title_format = "## [{version}](https://github.com/opsmill/emma/tree/{version}) - {project_date}"
issue_format = "[#{issue}](https://github.com/opsmill/emma/issues/{issue})"
orphan_prefix = "+"

[[tool.towncrier.type]]
directory = "security"
name = "Security"
showcontent = true

[[tool.towncrier.type]]
directory = "removed"
name = "Removed"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecated"
name = "Deprecated"
showcontent = true

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
