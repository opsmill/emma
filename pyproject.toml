[tool.poetry]
name = "emma"
version = "0.2.0"
description = "Emma is an agent designed to help you interact with Infrahub."
authors = ["OpsMill <info@opsmill.com>"]
readme = "README.md"

packages = [
    { include = "emma" }
]

[tool.poetry.dependencies]
python = "^3.10, < 3.13"
streamlit = "^1.37.1"
infrahub-sdk = {version = "^0", extras = ["all"]}
watchdog = "^5.0.3"
langchain = "^0.2.14"
langchain-community = "^0.2.12"
openai = "^1.41.0"
langchain-openai = "^0.1.22"
streamlit-flow-component = "^1.2.9"
streamlit-sortables = "^0.2.0"
st-pages = "^1.0.1"
jinja2 = "^3.1.4"

[tool.poetry.group.dev.dependencies]
ruff = "^0.6.9"
mypy = "^1.11.1"
yamllint = "^1.35.1"
towncrier = "^24.7.1"
pylint = "^3.2.6"
types-pyyaml = "^6.0.12.20240808"
invoke = "^2.2.0"


[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = ["if TYPE_CHECKING:", "raise NotImplementedError()"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
filterwarnings = ["ignore:pkg_resources is deprecated"]
addopts = "-vs"


[tool.mypy]
pretty = true
ignore_missing_imports = true

[tool.ruff]
line-length = 120

[tool.ruff.lint]
preview = true

select = [
    "C90",   # mccabe
    "ASYNC", # flake8-async
    "DTZ",   # flake8-datetimez
    "E",     # style errors
    "F",     # flakes
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "TCH",   # flake8-type-checking
    "T10",   # flake8-debugger
    "PL",    # pylint
    "Q",     # flake8-quotes
    "W",     # pycodestyle
    "YTT",   # flake8-2020
]

#https://docs.astral.sh/ruff/formatter/black/
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["emma"]

[tool.ruff.lint.pycodestyle]
max-line-length = 150

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.per-file-ignores]

[tool.pylint.general]
extension-pkg-whitelist = [
    "pydantic",
    "ujson",
]

[tool.pylint.format]
disable = "logging-fstring-interpolation"

[tool.pylint.basic]
# No docstrings required for private methods (Pylint default), or for test_ functions.
no-docstring-rgx="^(_|test_)"

[tool.pylint.messages_control]
# Line length is enforced by Black, so pylint doesn't need to check it.
# Pylint and Black disagree about how to format multi-line arrays; Black wins.
# assigning-non-slot,no-member,unsupported-membership-test,unsubscriptable-object,unsupported-assignment-operation,not-an-iterable
# are disabled because of our move to pydantic 2, pylint does not seem to respect the type hint for pydantic 2 model fields.
disable = """,
    line-too-long,
    missing-module-docstring,
    missing-function-docstring,
    missing-class-docstring,
    consider-using-from-import,
    invalid-name,
    too-many-arguments,
    too-many-locals,
    keyword-arg-before-vararg,
    too-few-public-methods,
    too-many-instance-attributes,
    fixme,
    consider-using-f-string,
    protected-access,
    import-self,
    wrong-import-order,
    assigning-non-slot,
    no-member,
    unsupported-membership-test,
    unsubscriptable-object,
    unsupported-assignment-operation,
    not-an-iterable,
    too-many-return-statements,
    unnecessary-comprehension,
    multiple-statements,
    """

[tool.pylint.miscellaneous]
notes = """,
    FIXME,
    XXX,
    """

[tool.pylint.similarities]
min-similarity-lines = 20


[tool.towncrier]
package = "emma"
directory = "emma/changelog.d"
filename = "CHANGELOG.md"
start_string = "<!-- towncrier release notes start -->\n"
underlines = ["", "", ""]
title_format = "## [{version}](https://github.com/opsmill/emma/tree/{version}) - {project_date}"
issue_format = "[#{issue}](https://github.com/opsmill/emma/issues/{issue})"
orphan_prefix = "+"

[[tool.towncrier.type]]
directory = "security"
name = "Security"
showcontent = true

[[tool.towncrier.type]]
directory = "removed"
name = "Removed"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecated"
name = "Deprecated"
showcontent = true

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
